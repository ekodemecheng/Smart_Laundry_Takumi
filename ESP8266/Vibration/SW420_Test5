// SW420_Test5

#include <Wire.h> 
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const int vibrationPin = D5;

unsigned long lastVibrationTime = 0;
unsigned long firstVibrationTime = 0;
bool isVibrating = false;
String status = "AVAILABLE";

// Konstanta waktu (ms)
const unsigned long IN_USE_THRESHOLD = 25000;   // 25 detik
const unsigned long IDLE_THRESHOLD = 120000;    // 120 detik tanpa getaran
const unsigned long VIBRATION_GAP = 3000;       // 3 detik gap untuk menganggap getaran berhenti
const unsigned long DISPLAY_UPDATE_INTERVAL = 500; // Update setiap 500ms

void setup() {
  Serial.begin(115200);
  pinMode(vibrationPin, INPUT_PULLUP);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("OLED gagal"));
    while (1);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("System Ready");
  display.display();
  delay(1000);

  lastVibrationTime = millis();
  status = "AVAILABLE";
  Serial.println("Status: AVAILABLE");
}

void loop() {
  static bool lastState = HIGH;
  static unsigned long lastDisplayUpdate = 0;
  static bool vibrationNotification = false;
  static unsigned long vibrationNotificationTime = 0;

  bool currentState = digitalRead(vibrationPin);

  // Debounce sederhana
  if (currentState != lastState) {
    delay(20);
    currentState = digitalRead(vibrationPin);
  }

  unsigned long now = millis();

  // Jika getaran terdeteksi
  if (currentState == LOW) {
    if (!isVibrating) {
      isVibrating = true;
      firstVibrationTime = now;
      vibrationNotification = true;
      vibrationNotificationTime = now;
      Serial.println("Vibration started");
    }
    lastVibrationTime = now;
  }

  // Jika getaran berhenti sementara
  if (isVibrating && (now - lastVibrationTime > VIBRATION_GAP)) {
    isVibrating = false;
    vibrationNotification = true;
    vibrationNotificationTime = now;
    Serial.println("Vibration stopped temporarily");
  }

  // Status berdasarkan durasi getaran
  if (isVibrating) {
    unsigned long vibDuration = now - firstVibrationTime;

    if (vibDuration >= IN_USE_THRESHOLD && status != "IN USE") {
      status = "IN USE";
      vibrationNotification = true;
      vibrationNotificationTime = now;
      Serial.println("Status: IN USE");
    }
  }

  // Tidak ada getaran dalam >150 detik
  if (!isVibrating && (now - lastVibrationTime > IDLE_THRESHOLD) && status != "AVAILABLE") {
    status = "AVAILABLE";
    vibrationNotification = true;
    vibrationNotificationTime = now;
    Serial.println("Status: AVAILABLE");
  }

  // Update tampilan OLED lebih sering
  if (now - lastDisplayUpdate > DISPLAY_UPDATE_INTERVAL) {
    lastDisplayUpdate = now;
    display.clearDisplay();
    
    // Tampilkan status utama (lebih besar)
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.print("Status:");
    
    display.setCursor(0, 16);
    if (status == "IN USE") {
      display.setTextColor(BLACK, WHITE); // Teks inverted
      display.println(" IN USE ");
    } else {
      display.setTextColor(WHITE);
      display.println("AVAILABLE");
    }
    display.setTextColor(WHITE); // Reset ke normal
    
    // Tampilkan notifikasi getaran (jika ada)
    if (vibrationNotification && (now - vibrationNotificationTime < 3000)) {
      display.setTextSize(1);
      display.setCursor(70, 0);
      display.print(isVibrating ? "GETARAN" : "STOP");
    }
    
    // Tampilkan waktu
    display.setTextSize(1);
    display.setCursor(70, 24);
    display.print("Time:");
    display.print((now - (status == "AVAILABLE" ? lastVibrationTime : firstVibrationTime)) / 1000);
    display.print("s");
    
    display.display();

    // Matikan notifikasi setelah 3 detik
    if (vibrationNotification && (now - vibrationNotificationTime >= 3000)) {
      vibrationNotification = false;
    }

    // Log serial
    Serial.print("Status: ");
    Serial.print(status);
    Serial.print(" | Vibration: ");
    Serial.print(isVibrating ? "YES" : "NO");
    Serial.print(" | Time: ");
    Serial.print((now - (status == "AVAILABLE" ? lastVibrationTime : firstVibrationTime)) / 1000);
    Serial.println("s");
  }

  lastState = currentState;
  delay(10);
}
